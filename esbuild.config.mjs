import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";

import inlineWorkerPlugin from "esbuild-plugin-inline-worker";

// Build the primary javascript file.
async function buildPlugin(prod) {
	fs.mkdirSync("build/plugin", { recursive: true });

	const result = await esbuild.build({
		banner: {
			js: `/* Datacore: Autogenerated ESBuild file. See https://github.com/blacksmithgu/datacore for source. */`,
		},
		entryPoints: ['src/main.ts'],
		bundle: true,
		metafile: true,
		plugins: [ inlineWorkerPlugin({ workerName: "Datacore Indexer" }) ],
		external: [
			'obsidian',
			'electron',
			'@codemirror/autocomplete',
			'@codemirror/collab',
			'@codemirror/commands',
			'@codemirror/language',
			'@codemirror/lint',
			'@codemirror/search',
			'@codemirror/state',
			'@codemirror/view',
			'@lezer/common',
			'@lezer/highlight',
			'@lezer/lr',
			"pdfjs-dist",
			...builtins],
			alias: {
				"react": "preact/compat"
			},
		format: 'cjs',
		target: 'es2018',
		logLevel: "info",
		sourcemap: prod ? false : 'inline',
		treeShaking: true,
		alias: {
			react: "preact/compat",
			"react-dom": "preact/compat"
		},
		outfile: 'build/plugin/main.js',
	}).catch(() => process.exit(1));

	// Copy the manifest and styles.
	fs.copyFileSync("manifest-beta.json", "build/plugin/manifest.json");
	fs.renameSync("build/plugin/main.css", "build/plugin/styles.css");
	fs.appendFileSync("build/plugin/main.js", "\n/* nosourcemap */")
	fs.writeFileSync("build/meta.json", JSON.stringify(result.metafile));
}

// Build the library.
async function buildLibrary(prod) {
	fs.mkdirSync("build/library", { recursive: true });

	const result = await esbuild.build({
		banner: {
			js: `/* Datacore: Autogenerated ESBuild file. See https://github.com/blacksmithgu/datacore for source. */`,
		},
		entryPoints: ['src/index.ts'],
		tsconfig: 'tsconfig.library.json',
		bundle: true,
		metafile: true,
		plugins: [ inlineWorkerPlugin({ workerName: "Datacore Indexer" }) ],
		external: [
			'obsidian',
			'electron',
			'@codemirror/autocomplete',
			'@codemirror/collab',
			'@codemirror/commands',
			'@codemirror/language',
			'@codemirror/lint',
			'@codemirror/search',
			'@codemirror/state',
			'@codemirror/view',
			'@lezer/common',
			'@lezer/highlight',
			'@lezer/lr',
			"pdfjs-dist",
			...builtins],
			alias: {
				"react": "preact/compat"
			},
		format: 'cjs',
		target: 'es2018',
		logLevel: "info",
		sourcemap: prod ? false : 'inline',
		treeShaking: true,
		alias: {
			react: "preact/compat",
			"react-dom": "preact/compat"
		},
		outfile: 'build/library/index.js',
	}).catch(() => process.exit(1));
}

const prod = process.argv[2] === 'production';
const target = process.argv[3] || 'all';

// Run the build.
if (target === 'plugin' || target === "all") {
	buildPlugin(prod);
}

if (target === 'library' || target === "all") {
	buildLibrary(prod);
}